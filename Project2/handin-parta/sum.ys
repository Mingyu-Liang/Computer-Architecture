# Leader name and ID here.
# LiangMingyu 515010910101

# Execution begins at address 0
	.pos 	0
init: 	
	irmovl 	Stack, %esp		# Set up stack pointer
	irmovl	Stack, %ebp		# Set up base pointer
	call	Main			# Execute main program
	halt					# Terminate program

# Sample linked list
	.align 	4
ele1:	
	.long 	0x00a
    .long 	ele2
ele2:	
	.long 	0x0b0
	.long 	ele3
ele3:	
	.long	0xc00
	.long 	0

Main:	
	pushl 	%ebp			#save a copy of initial ebp
	rrmovl	%esp,	%ebp	#set ebp to the beginning of Main's stack frame
	irmovl	ele1 , 	%eax	#eax=the pointer of the first node(ele1)
	pushl 	%eax			#save eax since its a caller-save register, whose data will be destroyed by callee
	call 	sumlist
	rrmovl 	%ebp , %esp		
	popl	%ebp			#clear the stack frame of Main, set esp and ebp to the initial value(0x100)
	ret
# int sum_list(list_ptr ls)
sumlist:	
	pushl 	%ebp			#save a copy of Main's ebp	
	rrmovl 	%esp ,%ebp		#set ebp to the beginning of sum_list's stack frame
	xorl 	%eax,%eax		#eax = 0
	mrmovl	8(%ebp) , %edx  #edx=ele1
	andl	%edx , %edx		
	je	End					#if(edx == 0) goto End 
Loop:	
	mrmovl	(%edx) , %ecx  	#ecx=node_value
	addl	%ecx , %eax		#val += node_value
	irmovl	$4 , %edi		
	addl	%edi , %edx		#edx+=4, which points to the pointer of next node
	mrmovl (%edx),	%esi	#esi=pointer of next node		
	rrmovl	%esi , %edx		#edx=pointer of next node
	andl	%edx , %edx		
	jne	Loop				#if edx == 0 break

End:	
	rrmovl 	%ebp , %esp		#resume the esp and ebp of Main
	popl 	%ebp			
	ret		

.pos 0x100
Stack:
